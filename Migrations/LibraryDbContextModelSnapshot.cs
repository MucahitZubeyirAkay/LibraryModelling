// <auto-generated />
using System;
using LibraryModelling.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryModelling.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    partial class LibraryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryModelling.DAL.Model.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"));

                    b.Property<DateTimeOffset?>("AuthorBirthDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("AuthorCountry")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AuthorLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AuthorPhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("LibraryModelling.DAL.Model.AuthorCategory", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("AuthorId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("AuthorCategory");
                });

            modelBuilder.Entity("LibraryModelling.DAL.Model.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<DateTime?>("BookFirstTimeOfPublication")
                        .HasColumnType("datetime2");

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BookId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("LibraryModelling.DAL.Model.BookAuthor", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("AuthorId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BookAuthor");
                });

            modelBuilder.Entity("LibraryModelling.DAL.Model.BookCategory", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("BookCategory");
                });

            modelBuilder.Entity("LibraryModelling.DAL.Model.BookStore", b =>
                {
                    b.Property<int>("BookStoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookStoreId"));

                    b.Property<long?>("BookEditionNumber")
                        .HasColumnType("bigint");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int?>("BookPageNumber")
                        .HasColumnType("int");

                    b.Property<string>("BookPhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookPublishingHouse")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BookStatus")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("BookStoreId");

                    b.HasIndex("BookId");

                    b.ToTable("BookStores");
                });

            modelBuilder.Entity("LibraryModelling.DAL.Model.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("LibraryModelling.DAL.Model.Library", b =>
                {
                    b.Property<int>("LibraryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LibraryId"));

                    b.Property<string>("LibraryAdressCity")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LibraryAdressDetail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LibraryAdressDistrict")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LibraryAdressPostalCode")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("LibraryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LibraryPhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LibraryStatus")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("LibraryId");

                    b.ToTable("Libraries");
                });

            modelBuilder.Entity("LibraryModelling.DAL.Model.LibraryBookStore", b =>
                {
                    b.Property<int>("LibraryId")
                        .HasColumnType("int");

                    b.Property<int>("BookStoreId")
                        .HasColumnType("int");

                    b.HasKey("LibraryId", "BookStoreId");

                    b.HasIndex("BookStoreId");

                    b.ToTable("LibraryBookStore");
                });

            modelBuilder.Entity("LibraryModelling.DAL.Model.LibraryUser", b =>
                {
                    b.Property<int>("LibraryId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LibraryId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("LibraryUser");
                });

            modelBuilder.Entity("LibraryModelling.DAL.Model.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("UserAdressCity")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserAdressDetail")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("UserAdressDistrict")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserAdressPostalCode")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTimeOffset?>("UserBirthDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserEMail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserPhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserStatus")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserTcIdentityNo")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LibraryModelling.DAL.Model.UserBookStore", b =>
                {
                    b.Property<int>("BookStoreId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BookDeliveredDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("BookDeliveryTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("BookReceiveDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BookStoreId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBookStore");
                });

            modelBuilder.Entity("LibraryModelling.DAL.Model.AuthorCategory", b =>
                {
                    b.HasOne("LibraryModelling.DAL.Model.Author", "Author")
                        .WithMany("Categories")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryModelling.DAL.Model.Category", "Category")
                        .WithMany("Authors")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("LibraryModelling.DAL.Model.BookAuthor", b =>
                {
                    b.HasOne("LibraryModelling.DAL.Model.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryModelling.DAL.Model.Book", "Book")
                        .WithMany("Authors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("LibraryModelling.DAL.Model.BookCategory", b =>
                {
                    b.HasOne("LibraryModelling.DAL.Model.Book", "Book")
                        .WithMany("Categories")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryModelling.DAL.Model.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("LibraryModelling.DAL.Model.BookStore", b =>
                {
                    b.HasOne("LibraryModelling.DAL.Model.Book", "Book")
                        .WithMany("BookStores")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("LibraryModelling.DAL.Model.LibraryBookStore", b =>
                {
                    b.HasOne("LibraryModelling.DAL.Model.BookStore", "BookStore")
                        .WithMany("Libraries")
                        .HasForeignKey("BookStoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryModelling.DAL.Model.Library", "Library")
                        .WithMany("BookStores")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookStore");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("LibraryModelling.DAL.Model.LibraryUser", b =>
                {
                    b.HasOne("LibraryModelling.DAL.Model.Library", "Library")
                        .WithMany("Users")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryModelling.DAL.Model.User", "User")
                        .WithMany("Libraries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryModelling.DAL.Model.UserBookStore", b =>
                {
                    b.HasOne("LibraryModelling.DAL.Model.BookStore", "BookStore")
                        .WithMany("Users")
                        .HasForeignKey("BookStoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryModelling.DAL.Model.User", "User")
                        .WithMany("UserBookStores")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookStore");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryModelling.DAL.Model.Author", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Categories");
                });

            modelBuilder.Entity("LibraryModelling.DAL.Model.Book", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("BookStores");

                    b.Navigation("Categories");
                });

            modelBuilder.Entity("LibraryModelling.DAL.Model.BookStore", b =>
                {
                    b.Navigation("Libraries");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LibraryModelling.DAL.Model.Category", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryModelling.DAL.Model.Library", b =>
                {
                    b.Navigation("BookStores");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LibraryModelling.DAL.Model.User", b =>
                {
                    b.Navigation("Libraries");

                    b.Navigation("UserBookStores");
                });
#pragma warning restore 612, 618
        }
    }
}
